Formal Action Description: 

Objects:
========
battery
connectionState = {connected, badly_connected, disconnected}
Steps = {1..N}


Variables:
==========
C = connectionState
T = steps


Fluents:
========
chargeLevel(battery) 
ok(battery) % abducable
charging(battery) %Canâ€™t begin charging if this is true
state(C) 
misaligned % abducable
start(T) %Time that step T started
end(T) %Time that step T ended
 


Actions:
==========

%% Durative action charge

charge(battery)(t1) causes chargeLevel(battery)(t2) = chargeLevel(battery)(t1) + F(chargeLevel(battery)(t1), start(t1), end(t1), start(t2), end(t2)) if state(connected), ok(battery)
charge(battery)(t1) causes chargeLevel(battery)(t2) < chargeLevel(battery)(t1) + F(chargeLevel(battery)(t1), start(t1), end(t1), start(t2), end(t2)) if state(badly_connected), ok(battery)
charge(battery)(t1) causes chargeLevel(battery)(t2) != chargeLevel(battery)(t1) + F(chargeLevel(battery)(t1), start(t1), end(t1), start(t2), end(t2)) if state(connected), -ok(battery)


start(charge(battery)) causes charging(battery) if -state(disconnected), -charging(battery)
end(charge(battery)) causes -charging(battery) 


Insert(battery) causes state(connected) if state(disconnected), not misaligned
Insert(battery) causes state(badly_connected) if state(disconnected), misaligned 
 
 
Remove(battery) causes state(disconnected) 


Fail(battery) causes -ok(battery) 

Repair(battery) caues ok(battery) if -ok(battery)

Accidental_misalignment causes misaligned

