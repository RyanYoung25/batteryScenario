%Planning module for the battery scenarios
% we are not equipped for multiple starts of charge
%:- occurs(start(charge(B)),I1), occurs(start(charge(B),I2), I1!=I2, battery(B), step(I1), step(I2).
% planning: we can accelerate or decelerate
% [MB 11/10/16] Lower bound of the choice atom changed from 0 to 1 to prevent the planner from generating "nop" steps
%               CORRECTION: bad idea. There are cases in which we cannot find n actions that achieve the goal at
%                           step n. We can find n-1 actions, but then the choice rule forces the selection of
%                           an n^th action, and such action undoes the goal, causing the program to become
%                           inconsistent.
%
0{pl_occurs(A,S): action(agent, A) }1 :- step(S), not goal(S), S >= curr_step.

occurs(A,S) :- pl_occurs(A,S).
% to preserve the semantics of processes, no actions are allowed while a process is terminating
%:- occurs(end(moving),I), occurs(A,I), A!=end(moving).

success :- goal(S), step(S), S <= n.
:- not success. %Failure is not an option

%For replanning from a history
required(N == V) :- obs(N, V).

%Executability condition
-pl_occurs(start(charge(B)), S) :- -holds(ok(B), S), battery(B), step(S). 
-pl_occurs(start(charge(B)), S) :- holds(state(badly_connected), S), battery(B), step(S). 
%-pl_occurs(start(charge(B)), S) :- occurs(remove(B), S), battery(B), step(S). 

%%Initial state:
%holds(state(disconnected), 0). 
%holds(misaligned, 0).
%holds(ok(b), 0).
%required(tstart(0)==0).
%required(v_initial(chargeLevel(B), 0)==0) :- battery(B).
%
%%Goal state:
%
%
%goal(S) :- -holds(charging(B), S), holds(state(disconnected), S), battery(B), step(S).
%required(v_final(chargeLevel(B), S)==100) :- goal(S), step(S), battery(B).
%
